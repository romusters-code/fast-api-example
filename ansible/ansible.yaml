---
- name: Set up ML Ops Environment
  hosts: localhost
  become: true

  vars:
    pyenv_root: "~/.pyenv"
    python_version: "3.12"

  tasks:

    # Ensure system is updated
    - name: Update and upgrade the system
      apt:
        update_cache: yes
        upgrade: dist

    # Install essential packages
    - name: Install essential development tools
      apt:
        name:
          - build-essential
          - curl
          - git
          - libssl-dev
          - zlib1g-dev
          - libbz2-dev
          - libreadline-dev
          - libsqlite3-dev
          - wget
          - llvm
          - libncurses5-dev
          - libncursesw5-dev
          - xz-utils
          - tk-dev
          - libffi-dev
          - liblzma-dev
          - python3-openssl
          - unzip
        state: present
        
    - name: Verify Git installation
      command: git --version
      register: git_version
      

    # Install Pyenv
    - name: Clone pyenv repository
      git:
        repo: "https://github.com/pyenv/pyenv.git"
        dest: "{{ pyenv_root }}"
        update: no

    - name: Set up pyenv environment variables
      copy:
        dest: ~/.bashrc
        content: |
          export PYENV_ROOT="{{ pyenv_root }}"
          export PATH="$PYENV_ROOT/bin:$PATH"
          eval "$(pyenv init --path)"
        owner: "{{ ansible_user_id }}"
        mode: 0644
      notify:
        - Reload bashrc

    - name: Install Python {{ python_version }} using pyenv
      shell: |
        source ~/.bashrc && \
        pyenv install -s {{ python_version }} && \
        pyenv global {{ python_version }}
      args:
        executable: /bin/bash

    # Install Poetry
    - name: Install Poetry
      shell: |
        curl -sSL https://install.python-poetry.org | python3 -
      args:
        executable: /bin/bash
        
    - name: Download Terraform
      get_url:
          url: https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip
          dest: /tmp/terraform.zip

    - name: Unzip Terraform
      unarchive:
        src: /tmp/terraform.zip
        dest: /usr/local/bin/
        remote_src: yes

    - name: Cleanup Terraform zip file
      file:
        path: /tmp/terraform.zip
        state: absent

    - name: Verify Terraform installation
      shell: terraform -version
      register: terraform_version_output
      changed_when: false

    - name: Show Terraform version
      debug:
        msg: "{{ terraform_version_output.stdout }}"

    # Install Azure CLI
    - name: Install Azure CLI
      shell: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | bash
      args:
        executable: /bin/bash

    # Install Google Cloud CLI
    - name: Install Google Cloud CLI
      shell: |
        echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
        curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
        sudo apt update && sudo apt install -y google-cloud-sdk
      args:
        executable: /bin/bash

    # Install Hadolint
    - name: Install Hadolint
      shell: |
        wget -O /usr/local/bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64
        chmod +x /usr/local/bin/hadolint
      args:
        executable: /bin/bash

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release | lower }} stable"
        state: present

    - name: Install Docker
      apt:
        name: docker-ce
        state: latest

    - name: Verify Docker installation
      command: docker --version
      register: docker_version_output
      changed_when: false

    - name: Show Docker version
      debug:
        msg: "{{ docker_version_output.stdout }}"

    - name: Determine PyCharm download URL
      set_fact:
        pycharm_download_url: >-
          https://download.jetbrains.com/python/pycharm-{{ pycharm_edition }}-{{ pycharm_version }}.tar.gz

    - name: Download PyCharm
      get_url:
        url: "{{ pycharm_download_url }}"
        dest: "/tmp/pycharm-{{ pycharm_edition }}-{{ pycharm_version }}.tar.gz"

    - name: Extract PyCharm
      unarchive:
        src: "/tmp/pycharm-{{ pycharm_edition }}-{{ pycharm_version }}.tar.gz"
        dest: "/opt/"
        remote_src: yes

    - name: Create symbolic link for PyCharm
      file:
        src: "/opt/pycharm-{{ pycharm_edition }}-{{ pycharm_version }}/bin/pycharm.sh"
        dest: "/usr/local/bin/pycharm"
        state: link

    - name: Verify PyCharm Professional license setup
      debug:
        msg: >
          "PyCharm Professional installed. Complete license activation manually."
      when: pycharm_edition == "professional"

    - name: Display PyCharm installation info
      debug:
        msg: >
          "PyCharm {{ pycharm_edition }} edition installed in /opt/pycharm-{{ pycharm_version }}.
          Launch using 'pycharm' command."
    
    - name: Create a desktop shortcut for PyCharm (Optional)
      copy:
        dest: "/usr/share/applications/pycharm.desktop"
        content: |
          [Desktop Entry]
          Version=1.0
          Name=PyCharm Community Edition
          Comment=The Python IDE for Professional Developers
          Exec=/opt/pycharm-community-{{ pycharm_version }}/bin/pycharm.sh %f
          Icon=/opt/pycharm-community-{{ pycharm_version }}/bin/pycharm.png
          Terminal=false
          Type=Application
          Categories=Development;IDE;
          StartupWMClass=jetbrains-pycharm
        mode: '0644'
    
    - name: Verify PyCharm installation
      command: pycharm --version
      register: pycharm_version_output
      changed_when: false

    - name: Create src directory
      file:
        path: ~/virtualenvs
        state: directory
        mode: '0755'

    - name: Create bin directory
      file:
        path: ~/repositories
        state: directory
        mode: '0755'

    - name: Create config directory
      file:
        path: ~/data
        state: directory
        mode: '0755'


  handlers:
    - name: Reload bashrc
      shell: source ~/.bashrc
      args:
        executable: /bin/bash
